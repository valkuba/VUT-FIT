==================================================
Řešení projektu č.3 z předmětu IAN: Pokročilá analýza crash dump
Autor: Jakub Valeš, xvales04
Datum: 21.4.2024
==================================================

$ crash vmlinux vmcore_p3
      KERNEL: vmlinux  [TAINTED]
    DUMPFILE: vmcore_p3  [PARTIAL DUMP]
        CPUS: 4
        DATE: Wed Mar 30 15:34:31 CEST 2022
      UPTIME: 00:04:06
LOAD AVERAGE: 2.54, 1.11, 0.43
       TASKS: 197
    NODENAME: rhel8-student-temp
     RELEASE: 4.18.0-348.12.2.el8_5.x86_64
     VERSION: #1 SMP Mon Jan 17 07:06:06 EST 2022
     MACHINE: x86_64  (2095 Mhz)
      MEMORY: 2 GB
       PANIC: "Kernel panic - not syncing: hung_task: blocked tasks"
         PID: 42
     COMMAND: "khungtaskd"
        TASK: ff47e40b7fac5ac0  [THREAD_INFO: ff47e40b7fac5ac0]
         CPU: 2
       STATE: TASK_RUNNING (PANIC)

Z prvního výpisu zjišťujeme, že paniku vyvolal proces "khungtaskd" na CPU č.2. Ze zadání víme, že paniku způsobil modul, který ještě podle popisu byl "tainted".
Podle panic message byl pád zapříčiněn blokovanou úlohou.
Navíc se dozvídáme, že paniku vyvolal příkaz "khungtaskd", což je démon, který běží na počítači a prohledává všechny procesy, které jsou označeny jako TASK_UNINTERRUPTIBLE 
a pokud nějaký takový proces nebyl plánovačem naplánován v posledních 120s je označen jako hung_task.
--------------------------------------------------------

crash> sysctl_hung_task_panic
sysctl_hung_task_panic = $1 = 1

Z výpisu zjišťujeme, že bylo v kernelu nastaveno, aby v případě nalezení hung_task systém zpanikoval.
--------------------------------------------------------

crash> bt 42
PID: 42     TASK: ff47e40b7fac5ac0  CPU: 2   COMMAND: "khungtaskd"
 #0 [ff7ea329804a3d28] machine_kexec at ffffffff89e635ce
 #1 [ff7ea329804a3d80] __crash_kexec at ffffffff89f9d6bd
 #2 [ff7ea329804a3e48] panic at ffffffff89eeb227
 #3 [ff7ea329804a3ec8] watchdog at ffffffff89fd355f
 #4 [ff7ea329804a3f10] kthread at ffffffff89f0e906
 #5 [ff7ea329804a3f50] ret_from_fork at ffffffff8a80023f

Z výpisu backtrace vidíme, že běžela funkce watchdog, která následně vyvolal paniku.
--------------------------------------------------------

$ cd linux-4.18.0-348.12.2.el8_5/kernel/
$ less hung_task.c
static void check_hung_task(struct task_struct *t, unsigned long timeout)
{....
        /*
         * Ok, the task did not get scheduled for more than 2 minutes,
         * complain:
         */
        if (sysctl_hung_task_warnings) {
                if (sysctl_hung_task_warnings > 0)
                        sysctl_hung_task_warnings--;
                pr_err("INFO: task %s:%d blocked for more than %ld seconds.\n",
                        t->comm, t->pid, timeout);
                pr_err("      %s %s %.*s\n",
                        print_tainted(), init_utsname()->release,
                        (int)strcspn(init_utsname()->version, " "),
                        init_utsname()->version);
                pr_err("\"echo 0 > /proc/sys/kernel/hung_task_timeout_secs\""
                        " disables this message.\n");
                sched_show_task(t);
                hung_task_show_lock = true;
        }

        touch_nmi_watchdog();

        if (sysctl_hung_task_panic) {
                hung_task_show_lock = true;
                hung_task_call_panic = true;
        }
}

/*
 * kthread which checks for tasks stuck in D state
 */
static int watchdog(void *dummy)
{
        unsigned long hung_last_checked = jiffies;

        set_user_nice(current, 0);

        for ( ; ; ) {
                unsigned long timeout = sysctl_hung_task_timeout_secs;
                long t = hung_timeout_jiffies(hung_last_checked, timeout);

                if (t <= 0) {
                        if (!atomic_xchg(&reset_hung_task, 0) &&
                            !hung_detector_suspended)
                                check_hung_uninterruptible_tasks(timeout);
                        hung_last_checked = jiffies;
                        continue;
                }
                schedule_timeout_interruptible(t);
        }

        return 0;
}

Ve zdrojovém kódu kernelu můžeme v souboru hung_task.c najít funkci check_hung_task(), která kontroluje jestli nějaká úloha nečeká více než 120s bez toho, 
aby si ji "všimnul" plánovač a pokud ano, označí tuto úlohu jako hang_task. 
Navíc pokud je sysctl_hung_task_panic nastaven na true (což v našem případě je, viz výše) vyvolá paniku systému.
Dále jsme zde našli funkci watchdog, kterou jsme našli i ve volání backtrace, tato funkce běží v nekonečném for cyklu (jako démon) a volá funkci check_hung_uninterruptible_tasks, 
která hledá výše zmíněné UNINTERRUPTIBLE úlohy a pokud po dobu timeoutu nebyly naplánovány označí je za hang_task.
--------------------------------------------------------

crash> sysctl_hung_task_timeout_secs
sysctl_hung_task_timeout_secs = $6 = 120

Zde vidíme hodnotu timeoutu pro hang_task, je to skutečně 120s jak bylo zmíněno výše.
--------------------------------------------------------
crash> log | less
....
[    5.186354] loop: module loaded
[    5.201351] loop0: detected capacity change from 0 to 10975444992
[    5.209224] ISO 9660 Extensions: Microsoft Joliet Level 3
[    5.209563] ISO 9660 Extensions: RRIP_1991A
[   51.555322] smajdalf: loading out-of-tree module taints kernel.
[   51.555903] smajdalf: module license 'RH-EDU' taints kernel.
[   51.556426] Disabling lock debugging due to kernel taint
[   51.556949] smajdalf: module verification failed: signature and/or required key missing - tainting kernel
[   51.558281] Smajdalf: Carodej nikdy nechodi pozde.
[  245.808706] INFO: task systemd:1 blocked for more than 120 seconds.
[  245.809290]       Tainted: P           OE    --------- -  - 4.18.0-348.12.2.el8_5.x86_64 #1
[  245.810057] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
[  245.810779] task:systemd         state:D stack:    0 pid:    1 ppid:     0 flags:0x00000000
[  245.811520] Call Trace:
[  245.811758]  __schedule+0x2bd/0x760
[  245.812076]  schedule+0x37/0xa0
[  245.812363]  rwsem_down_read_slowpath+0x360/0x3d0
[  245.812802]  __do_page_fault+0x3b1/0x4c0
[  245.813157]  do_page_fault+0x37/0x130
[  245.813493]  ? page_fault+0x8/0x30
[  245.813812]  page_fault+0x1e/0x30
[  245.814117] RIP: 0033:0x7f2411c4e27f
[  245.814452] Code: Unable to access opcode bytes at RIP 0x7f2411c4e255.
[  245.815041] RSP: 002b:00007fff58f62300 EFLAGS: 00010206
[  245.815515] RAX: 000055c2b6810bf0 RBX: 00007f2411f89bc0 RCX: 000055c2b67f67c0
[  245.816155] RDX: 00007f2411f89c50 RSI: 00007f2411f89c40 RDI: 00007f2411f89bc8
[  245.816798] RBP: 000000000000001d R08: 000055c2b66515f0 R09: 000055c2b66515e0
[  245.817433] R10: 00007f2411f89bc0 R11: 0000000000000007 R12: 0000000000000003
[  245.818075] R13: 000000000000001d R14: 00007f2411f89bc0 R15: 0000000000000030
...

Z logu lze vyčíst, že byl načten modul Smajdalf, který následně způsobil, že proces systemd s PID 1 byl blokován na více než 120s.
--------------------------------------------------------

crash> mod -t
NAME      TAINTS
smajdalf  POE

Příkazem mod -t si zobrazíme "tainted" načtené moduly a vidíme, že se jedná o výše zmíněný modul smajdalf.
--------------------------------------------------------

crash> log | less
.....
[  245.818753] NMI backtrace for cpu 2
[  245.819072] CPU: 2 PID: 42 Comm: khungtaskd Kdump: loaded Tainted: P           OE    --------- -  - 4.18.0-348.12.2.el8_5.x86_64 #1
[  245.820128] Hardware name: Red Hat Container-native virtualization/RHEL-AV, BIOS 1.14.0-1.module+el8.4.0+8855+a9e237a9 04/01/2014
[  245.821168] Call Trace:
[  245.821402]  dump_stack+0x5c/0x80
[  245.821713]  nmi_cpu_backtrace.cold.6+0x13/0x4e
[  245.822125]  ? lapic_can_unplug_cpu.cold.29+0x37/0x37
[  245.822587]  nmi_trigger_cpumask_backtrace+0xde/0xe0
[  245.823039]  watchdog+0x223/0x2e0
[  245.823345]  ? hungtask_pm_notify+0x40/0x40
[  245.823730]  kthread+0x116/0x130
[  245.824028]  ? kthread_flush_work_fn+0x10/0x10
[  245.824436]  ret_from_fork+0x1f/0x40
[  245.824774] Sending NMI from CPU 2 to CPUs 0-1,3:
[  245.825215] NMI backtrace for cpu 0 skipped: idling at native_safe_halt+0xe/0x10
[  245.825217] NMI backtrace for cpu 1 skipped: idling at native_safe_halt+0xe/0x10
[  245.825228] NMI backtrace for cpu 3 skipped: idling at native_safe_halt+0xe/0x10
[  245.826209] Kernel panic - not syncing: hung_task: blocked tasks
[  245.829539] CPU: 2 PID: 42 Comm: khungtaskd Kdump: loaded Tainted: P           OE    --------- -  - 4.18.0-348.12.2.el8_5.x86_64 #1
[  245.831540] Hardware name: Red Hat Container-native virtualization/RHEL-AV, BIOS 1.14.0-1.module+el8.4.0+8855+a9e237a9 04/01/2014
[  245.833520] Call Trace:
[  245.834215]  dump_stack+0x5c/0x80
[  245.834979]  panic+0xe7/0x2a9
[  245.835707]  watchdog+0x22f/0x2e0
[  245.836450]  ? hungtask_pm_notify+0x40/0x40
[  245.837255]  kthread+0x116/0x130
[  245.837977]  ? kthread_flush_work_fn+0x10/0x10
[  245.838792]  ret_from_fork+0x1f/0x40

Níže v logu vidíme, že watchdog našel "visící" úlohu a nastavil hung_task_mp_notify, což pak následně vyvolalo paniku hung_task, jak bylo rozebráno již výše.
--------------------------------------------------------

crash> bt 1
PID: 1      TASK: ff47e40b01891e40  CPU: 2   COMMAND: "systemd"
 #0 [ff7ea32980327d88] __schedule at ffffffff8a77a2ad
 #1 [ff7ea32980327e18] schedule at ffffffff8a77a787
 #2 [ff7ea32980327e28] rwsem_down_read_slowpath at ffffffff8a77d320
 #3 [ff7ea32980327ec0] __do_page_fault at ffffffff89e75121
 #4 [ff7ea32980327f20] do_page_fault at ffffffff89e75267
 #5 [ff7ea32980327f50] page_fault at ffffffff8a80111e
    RIP: 00007f2411c4e27f  RSP: 00007fff58f62300  RFLAGS: 00010206
    RAX: 000055c2b6810bf0  RBX: 00007f2411f89bc0  RCX: 000055c2b67f67c0
    RDX: 00007f2411f89c50  RSI: 00007f2411f89c40  RDI: 00007f2411f89bc8
    RBP: 000000000000001d   R8: 000055c2b66515f0   R9: 000055c2b66515e0
    R10: 00007f2411f89bc0  R11: 0000000000000007  R12: 0000000000000003
    R13: 000000000000001d  R14: 00007f2411f89bc0  R15: 0000000000000030
    ORIG_RAX: ffffffffffffffff  CS: 0033  SS: 002b

Provedeme backtrace procesu s PID 1 a zjišťujeme, že chtěl přistupovat k nějaké paměťové stránce přes proceduru page_fault a následně z ní chtěl nejspíše číst nebo na ni zapisovat.
Toto víme díky rwsem_down_read_slowpath, což je read-write semafor, který umožňuje konkurentní čtení. 
Jelikož funkce obsahuje slova read_slowpath můžeme předpokládat, že funkce chtěla číst z dané paměťové stránky, ale nejspíše do ni někdo zrovna zapisoval (proto slow_path).
----------------------------------------------------

crash> rwsem_down_read_slowpath
rwsem_down_read_slowpath = $1 =
 {struct rw_semaphore *(struct rw_semaphore *, long, int)} 0xffffffff8a77cfc0 <rwsem_down_read_slowpath>
crash> struct rw_semaphore
struct rw_semaphore {
    atomic_long_t count;
    struct list_head wait_list;
    raw_spinlock_t wait_lock;
    struct optimistic_spin_queue osq;
    union {
        atomic_long_t owner;
        struct {
            struct task_struct *owner;
        } rh_kabi_hidden_39;
        union {
            <no data fields>
        };
    };
}
SIZE: 40

Funkce rwsem_down_read_slowpath využívá strukturu rw_semaphore, kterou jsme si následně nechali vypsat, z ní vidíme, že využívá strukturu spinlock, 
což je aktivní zámek (procesy čekající na zámek se neuspou, ale aktivně čekají), který může způsobit softlockup, 
dále je zajímavý atribut owner, který by nám mohl prozradit proces, který daný semafor používal.
---------------------------------------------------

$ cd linux-4.18.0-348.12.2.el8_5/kernel/
$ grep -r . -e 'schedule(void)'
$ cd sched
$ less core.c
/schedule\(void\)

asmlinkage __visible void __sched schedule(void)
{
        struct task_struct *tsk = current;

        sched_submit_work(tsk);
        do {
                preempt_disable();
                __schedule(false);
                sched_preempt_enable_no_resched();
        } while (need_resched());
        sched_update_worker(tsk);
}
EXPORT_SYMBOL(schedule);

Ještě jsme v backtrace viděli, že se volá funkce schedule, což je plánovač úkolů. V souborech kernelu jsem našel celé tělo a hlavičku této funkce.
---------------------------------------------------------------

crash> bt -f 1
PID: 1      TASK: ff47e40b01891e40  CPU: 2   COMMAND: "systemd"
...
 #1 [ff7ea32980327e18] schedule at ffffffff8a77a787
    ff7ea32980327e20: ff47e40b340bec70 ffffffff8a77d320
...
 #3 [ff7ea32980327ec0] __do_page_fault at ffffffff89e75121
    ff7ea32980327ec8: ff47e40b340bec70 0000000000000000
    ff7ea32980327ed8: 0000000000000000 0000000000000002
    ff7ea32980327ee8: 0000000000000000 0000000000000000
    ff7ea32980327ef8: ff7ea32980327f58 000055c2b6810c00
    ff7ea32980327f08: 0000000000000007 0000000000000000
    ff7ea32980327f18: 0000000000000000 ffffffff89e75267
...

V backtrace se zobrazením rámce volání si všimneme, že obě procedury (schedule a __do_page_fault) jsou volány s adresou ff47e40b340bec70 na rámci volání. 
To by měla být adresa semaforu, ze kterého bychom měli zjistit proces, který jej vlastní.
--------------------------------------------------------------

crash> struct rw_semaphore ff47e40b340bec70
struct rw_semaphore {
  count = {
    counter = 3
  },
  wait_list = {
    next = 0xff7ea32980327e60,
    prev = 0xff7ea329809ffd70
  },
  wait_lock = {
    raw_lock = {
      {
        val = {
          counter = 0
        },
        {
          locked = 0 '\000',
          pending = 0 '\000'
        },
        {
          locked_pending = 0,
          tail = 0
        }
      }
    }
  },
  osq = {
    tail = {
      counter = 0
    }
  },
  {
    owner = {
      counter = -51822134688203648
    },
    rh_kabi_hidden_39 = {
      owner = 0xff47e40b06683c80
    },
    {<No data fields>}
  }
}


Je to tak a když si necháme vypsat strukturu semaforu na adrese ff47e40b340bec70 vidíme, že semafor volala funkce s adresou 0xff47e40b06683c80.
-------------------------------------------------

crash> ps | grep "UN"
      1      0   2  ff47e40b01891e40  UN   0.8  175880  16264  systemd
   1706   1705   0  ff47e40b06683c80  UN   0.2  236036   3984  bash
   2278      2   3  ff47e40b075bdac0  UN   0.3   79016   6124  systemd-cgroups

Pomocí příkazu ps, si necháme vypsat běžící procesy a díky grep vidíme všechny, které jsou ve stavu UNINTERRUPTIBLE a že to je kromě procesu s PID 1 i proces, 
který je na adrese ff47e40b06683c80, což je shodná adresa, kterou jsme našli v semaforu v atributu owner.
-------------------------------------------------

crash> bt 0xff47e40b06683c80
PID: 1706   TASK: ff47e40b06683c80  CPU: 0   COMMAND: "bash"
 #0 [ff7ea32980ae7d30] __schedule at ffffffff8a77a2ad
 #1 [ff7ea32980ae7dc0] schedule at ffffffff8a77a787
 #2 [ff7ea32980ae7dd0] schedule_preempt_disabled at ffffffff8a77aaca
 #3 [ff7ea32980ae7dd8] __mutex_lock at ffffffff8a77c7c5
 #4 [ff7ea32980ae7e68] take_the_lock_of_power at ffffffffc0922048 [smajdalf]
 #5 [ff7ea32980ae7e78] proc_sys_call_handler at ffffffff8a1be885
 #6 [ff7ea32980ae7ed0] vfs_write at ffffffff8a130955
 #7 [ff7ea32980ae7f00] ksys_write at ffffffff8a130bcf
 #8 [ff7ea32980ae7f38] do_syscall_64 at ffffffff89e042bb
 #9 [ff7ea32980ae7f50] entry_SYSCALL_64_after_hwframe at ffffffff8a8000ad
    RIP: 00007f511d8a1648  RSP: 00007fffc07911b8  RFLAGS: 00000246
    RAX: ffffffffffffffda  RBX: 0000000000000002  RCX: 00007f511d8a1648
    RDX: 0000000000000002  RSI: 00005651e8df2ae0  RDI: 0000000000000001
    RBP: 00005651e8df2ae0   R8: 000000000000000a   R9: 00007f511d934620
    R10: 000000000000000a  R11: 0000000000000246  R12: 00007f511db746e0
    R13: 0000000000000002  R14: 00007f511db6f880  R15: 0000000000000002
    ORIG_RAX: 0000000000000001  CS: 0033  SS: 002b

Z backtrace procesu s PID 1076 vidíme, že proces obsahuje několik systémových volání, po kterých se volá funkce take_the_lock_of_power, která je součástí "tainted" modulu smajdalf. 
Podle názvu (lock) a také volání funkce mutex zjišťujeme, že máme co dočinění s dalšími zámky a nejspíše právě tyto funkce zapříčinily zablokování úlohy.
Jedná se o ten nejjednodušší zámek, který když je zamčený a nějaký další proces má o něj zájem, tak jej zapíše na waitlist a následně se proces uspí, 
přičemž poté, co je zámek odemčen, zamkne si ho první proces z waitlistu.
-----------------------------------------------------------------------------

crash> dis take_the_lock_of_power
0xffffffffc0922000 <take_the_lock_of_power>:    nopl   0x0(%rax,%rax,1) [FTRACE NOP]
0xffffffffc0922005 <take_the_lock_of_power+5>:  mov    -0x35508fcc(%rip),%rax        # 0xffffffff8b419040 <init_task+2048>
0xffffffffc092200c <take_the_lock_of_power+12>: push   %rbx
0xffffffffc092200d <take_the_lock_of_power+13>: cmp    $0xffffffff8b419040,%rax
0xffffffffc0922013 <take_the_lock_of_power+19>: je     0xffffffffc092201e <take_the_lock_of_power+30>
0xffffffffc0922015 <take_the_lock_of_power+21>: cmpl   $0x1,0x100(%rax)
0xffffffffc092201c <take_the_lock_of_power+28>: je     0xffffffffc092204c <take_the_lock_of_power+76>
0xffffffffc092201e <take_the_lock_of_power+30>: mov    $0x9502f8ff,%ebx
0xffffffffc0922023 <take_the_lock_of_power+35>: pause
0xffffffffc0922025 <take_the_lock_of_power+37>: call   0xffffffff8a77a850 <_cond_resched>
0xffffffffc092202a <take_the_lock_of_power+42>: sub    $0x1,%rbx
0xffffffffc092202e <take_the_lock_of_power+46>: jne    0xffffffffc0922023 <take_the_lock_of_power+35>
0xffffffffc0922030 <take_the_lock_of_power+48>: mov    $0xffffffffc0924100,%rdi
0xffffffffc0922037 <take_the_lock_of_power+55>: call   0xffffffff8a77c9c0 <mutex_lock>
0xffffffffc092203c <take_the_lock_of_power+60>: mov    $0xffffffffc0924100,%rdi
0xffffffffc0922043 <take_the_lock_of_power+67>: call   0xffffffff8a77c9c0 <mutex_lock>
0xffffffffc0922048 <take_the_lock_of_power+72>: xor    %eax,%eax
0xffffffffc092204a <take_the_lock_of_power+74>: pop    %rbx
0xffffffffc092204b <take_the_lock_of_power+75>: ret
0xffffffffc092204c <take_the_lock_of_power+76>: mov    0x50(%rax),%rdi
0xffffffffc0922050 <take_the_lock_of_power+80>: add    $0x70,%rdi
0xffffffffc0922054 <take_the_lock_of_power+84>: call   0xffffffff8a77cf30 <down_write>
0xffffffffc0922059 <take_the_lock_of_power+89>: jmp    0xffffffffc092201e <take_the_lock_of_power+30>

Díky disassembly funkce take_the_lock_of_power vidíme, že funkce volá 2x za sebou funkci mutex_lock a argument této funkci dává do registru RDI, 
ale jak vidíme do tohoto registru posílá hodnota ze stejné adresy 0xffffffffc0924100, což nejspíše způsobilo deadlock.
----------------------------------------------------------------

Proces s PID 1 se snaží přistupovat k paměťovým stránkám, které jsou ale zamčeny semaforem s adresou ff47e40b340bec70. Proces se dostane do stavu UNINTERRUPTIBLE 
a plánovač úloh ho z toho stavu po dobu delší než 120s nedostane, což způsobí že jej najde proces khungtaskd (pomocí funkce watchdog a check_hung_task) a označí jej za hugh_task.
To kvůli zapnutému sysctl_hung_task_panic zapříčiní paniku systému. Výše semafor nemůže být odemčen, protože s ním pracuje proces, který se kvůli funkci take_the_lock_of_power 
a jejímu dvojitému mutexu dostal do deadlocku.
Možné řešení tohoto problému je oprava modulu smajdalf, aby "nedeadlockoval", nebo jej prostě nepoužívat (uvést jej na nějaký blacklist). Případě se panice dá vyhnout vypnutím sysctl_hung_task_panic.